name: Odoo CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE_NAME: abdochtouki/odoo-app
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
  AWS_EC2_HOST: ${{ secrets.AWS_EC2_HOST }}
  AWS_EC2_USER: ${{ secrets.AWS_EC2_USER }}
  AWS_EC2_SSH_KEY: ${{ secrets.AWS_EC2_SSH_KEY }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.tag.outputs.image_tag }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      id: build
      run: docker build -t ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} .

    - name: Generate image tag
      id: tag
      run: echo "image_tag=${{ github.sha }}" >> $GITHUB_OUTPUT

  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Load built image
      run: |
        docker load --input $(find /tmp -name "*.tar" | head -1)

    - name: Run tests
      run: |
        docker run -d --name odoo-test -p 8069:8069 ${{ env.DOCKER_IMAGE_NAME }}:${{ needs.build.outputs.image_tag }}
        sleep 30 # Wait for Odoo to start
        curl --fail http://localhost:8069 || exit 1
        docker stop odoo-test
        docker rm odoo-test

  push:
    needs: [build, test]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ env.DOCKER_HUB_USERNAME }}
        password: ${{ env.DOCKER_HUB_TOKEN }}

    - name: Push Docker image
      run: |
        docker tag ${{ env.DOCKER_IMAGE_NAME }}:${{ needs.build.outputs.image_tag }} ${{ env.DOCKER_IMAGE_NAME }}:latest
        docker push ${{ env.DOCKER_IMAGE_NAME }}:${{ needs.build.outputs.image_tag }}
        docker push ${{ env.DOCKER_IMAGE_NAME }}:latest

  deploy:
    needs: push
    runs-on: ubuntu-latest

    steps:
    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ env.AWS_EC2_SSH_KEY }}
        known_hosts: 'just-a-placeholder-so-we-dont-get-errors'

    - name: Deploy to AWS EC2
      run: |
        ssh -o StrictHostKeyChecking=no ${{ env.AWS_EC2_USER }}@${{ env.AWS_EC2_HOST }} << 'EOF'
        # Pull the latest Docker image
        docker pull ${{ env.DOCKER_IMAGE_NAME }}:latest

        cd odoo-project
        
        # Stop and remove the old container if it exists
        docker stop odoo-app || true
        docker rm odoo-app || true
        
        # Run the new container
        docker run -d \
          --name odoo-app \
          -p 8069:8069 \
          -p 8071:8071 \
          -p 8072:8072 \
          -v odoo-data:/var/lib/odoo \
          -v odoo-extra-addons:/mnt/extra-addons \
          --env-file /home/odoo/env.list \
          ${{ env.DOCKER_IMAGE_NAME }}:latest
        
        # Clean up old images
        docker image prune -af
        EOF
