name: Odoo CI/CD Pipeline

on:
  push:
    branches: [ main ]

env:
  DOCKER_IMAGE_NAME: abdochtouki/odoo-app
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
  AWS_EC2_HOST: ${{ secrets.AWS_EC2_HOST }}
  AWS_EC2_USER: ${{ secrets.AWS_EC2_USER }}
  AWS_EC2_SSH_KEY: ${{ secrets.AWS_EC2_SSH_KEY }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.tag.outputs.image_tag }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: docker build -t ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} .

    - name: Save Docker image
      run: docker save ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} -o odoo-image.tar

    - name: Upload Docker image
      uses: actions/upload-artifact@v4
      with:
        name: odoo-docker-image
        path: odoo-image.tar

    - name: Generate image tag
      id: tag
      run: echo "image_tag=${{ github.sha }}" >> $GITHUB_OUTPUT

  test:
    needs: build
    runs-on: ubuntu-latest
  
    steps:
    - name: Download Docker image
      uses: actions/download-artifact@v4
      with:
        name: odoo-docker-image
  
    - name: Load Docker image
      run: docker load -i odoo-image.tar
  
    - name: Run complete test with debugging
      run: |
        # 1. Start PostgreSQL with proper initialization
        docker run -d --name test-postgres \
          -e POSTGRES_USER=odoo \
          -e POSTGRES_PASSWORD=odoo \
          -e POSTGRES_DB=postgres \
          --health-cmd="pg_isready -U odoo" \
          --health-interval=5s \
          --health-timeout=2s \
          --health-retries=10 \
          postgres:13
  
        # Wait for PostgreSQL to be fully ready
        echo "Waiting for PostgreSQL to initialize..."
        docker inspect --format "{{json .State.Health.Status }}" test-postgres | grep -q '"healthy"' || {
          echo "PostgreSQL failed to start"
          docker logs test-postgres
          exit 1
        }
        echo "PostgreSQL is ready"
  
        # 2. Start Odoo with debug mode
        docker run -d --name odoo-test \
          --link test-postgres:db \
          -p 8069:8069 \
          -e HOST=db \
          -e USER=odoo \
          -e PASSWORD=odoo \
          -e ODOO_RC=/etc/odoo/odoo.conf \
          -e ODOO_DEBUG=1 \
          ${{ env.DOCKER_IMAGE_NAME }}:${{ needs.build.outputs.image_tag }}
  
        # 3. Monitor Odoo startup
        echo "Monitoring Odoo startup..."
        ATTEMPT=0
        MAX_ATTEMPTS=30
        while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
          ATTEMPT=$((ATTEMPT+1))
          
          # Check container status
          CONTAINER_STATUS=$(docker inspect --format "{{.State.Status}}" odoo-test)
          if [ "$CONTAINER_STATUS" != "running" ]; then
            echo "Odoo container is not running (status: $CONTAINER_STATUS)"
            docker logs odoo-test
            exit 1
          fi
          
          # Check HTTP access
          if curl -sSf http://localhost:8069/web/database/selector >/dev/null; then
            echo "Odoo is ready after $((ATTEMPT*5)) seconds"
            break
          fi
          
          # Final attempt failure
          if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
            echo "Odoo failed to start within $((MAX_ATTEMPTS*5)) seconds"
            echo "=== Odoo Container Logs ==="
            docker logs odoo-test
            echo "=== Running Processes ==="
            docker exec odoo-test ps aux
            echo "=== Network Connections ==="
            docker exec odoo-test netstat -tuln
            echo "=== Configuration Files ==="
            docker exec odoo-test ls -la /etc/odoo/
            docker exec odoo-test cat /etc/odoo/odoo.conf || true
            exit 1
          fi
          
          echo "Attempt $ATTEMPT/$MAX_ATTEMPTS - Waiting 5 seconds..."
          sleep 5
        done
  
        # 4. Verify full functionality
        echo "Running final verification..."
        curl -v http://localhost:8069/web/database/selector || {
          echo "Final verification failed"
          docker logs odoo-test
          exit 1
        }
  
        # 5. Clean up
        docker stop odoo-test test-postgres
        docker rm odoo-test test-postgres
        echo "Test completed successfully"
  push:
    needs: [build, test]
    runs-on: ubuntu-latest

    steps:
    - name: Download Docker image
      uses: actions/download-artifact@v4
      with:
        name: odoo-docker-image

    - name: Load Docker image
      run: docker load -i odoo-image.tar

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_HUB_USERNAME }}
        password: ${{ env.DOCKER_HUB_TOKEN }}

    - name: Push Docker image
      run: |
        docker tag ${{ env.DOCKER_IMAGE_NAME }}:${{ needs.build.outputs.image_tag }} ${{ env.DOCKER_IMAGE_NAME }}:latest
        docker push ${{ env.DOCKER_IMAGE_NAME }}:${{ needs.build.outputs.image_tag }}
        docker push ${{ env.DOCKER_IMAGE_NAME }}:latest

  deploy:
    needs: push
    runs-on: ubuntu-latest

    steps:
    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ env.AWS_EC2_SSH_KEY }}
        known_hosts: 'just-a-placeholder-so-we-dont-get-errors'

    - name: Deploy to AWS EC2
      run: |
        ssh -o StrictHostKeyChecking=no ${{ env.AWS_EC2_USER }}@${{ env.AWS_EC2_HOST }} << 'EOF'
        # Pull the latest Docker image
        docker pull ${{ env.DOCKER_IMAGE_NAME }}:latest
        cd odoo-project
        # Stop and remove the old container if it exists
        docker stop odoo-app || true
        docker rm odoo-app || true
        
        # Run the new container (with your actual production configuration)
        docker run -d \
          --name odoo-app \
          -p 8069:8069 \
          -p 8071:8071 \
          -p 8072:8072 \
          --link postgres:db \
          -v odoo-data:/var/lib/odoo \
          -v odoo-extra-addons:/mnt/extra-addons \
          -e HOST=db \
          -e USER=odoo \
          -e PASSWORD=odoo \
          ${{ env.DOCKER_IMAGE_NAME }}:latest
        
        # Clean up old images
        docker image prune -af
        EOF
